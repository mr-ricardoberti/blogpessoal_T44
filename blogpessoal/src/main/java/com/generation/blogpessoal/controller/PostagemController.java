package com.generation.blogpessoal.controller;

import java.util.List;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * 
 * A anota√ß√£o @RestController: indica que a Classe √© uma RestController, ou seja, 
 * √© respons√°vel por responder todas as requisi√ß√µes http enviadas para um endpoint 
 * (endere√ßo) definido na anota√ß√£o @RequestMapping
 * 
 * A anota√ß√£o @RequestMapping("/postagens"): indica o endpoint (endere√ßo) que a 
 * controladora responder√° as requisi√ß√µes 
 * 
 * A anota√ß√£o @CrossOrigin("*"): indica que a classe controladora permitir√° o 
 * recebimento de requisi√ß√µes realizadas de fora do dom√≠nio (localhost, em nosso caso) ao qual 
 * ela pertence. Essa anota√ß√£o √© essencial para que o front-end (Angular ou React), tenha
 * acesso √† nossa API (O termo t√©cnico √© consumir a API)
 * 
 * Para as vers√µes mais recentes do Angular e do React, √© necess√°rio configurar esta anota√ß√£o 
 * com os seguintes par√¢metros: @CrossOrigin(origins = "*", allowedHeaders = "*") 
 * 
 * Esta anota√ß√£o, al√©m de liberar todas as origens (origins), libera tamb√©m todos os par√¢metros
 * do cabe√ßalho das requisi√ß√µes (allowedHeaders).
 * 
 * Em produ√ß√£o, o * √© substituido pelo endere√ßo de dom√≠nio (exemplo: www.meudominio.com) do
 * Frontend
 * 
 */

@RestController
@RequestMapping("/postagens") 
@CrossOrigin(origins = "*", allowedHeaders = "*") 
public class PostagemController {
	
	/*
	 * 
	 * Inje√ß√£o de Depend√™ncia (@Autowired): Consiste  na  maneira,  ou  seja,  na  implementa√ß√£o 
	 * utilizada pelo  Spring  Framework  de  aplicar  a  Invers√£o  de  Controle  quando  for 
	 * necess√°rio.
	 * 
	 * A Inje√ß√£o de Depend√™ncia define quais classes ser√£o instanciadas e em quais lugares ser√£o 
	 * injetadas quando houver necessidade. 
	 * 
	 * Em nosso exemplo a classe controladora cria um ponto de inje√ß√£o da interface PostagemRepository, 
	 * e quando houver a necessidade o Spring Framework ir√° criar uma inst√¢ncia (objeto) desta interface
	 * permitindo o uso de todos os m√©todos (padr√£o ou personalizados da Interface PostagemRepository)
	 *  
	 * */
	
	@Autowired 
	private PostagemRepository postagemRepository;
	
	/**
	 * Listar todas as Postagens
	 *  
	 * A anota√ß√£o @GetMapping: indica que o m√©todo abaixo responder√° todas as 
	 * requisi√ß√µes do tipo GET que forem enviadas no endpoint /postagens
	 * 
	 * O M√©todo getAll() ser√° do tipo ResponseEntity porque ele responder√° a requisi√ß√£o (Request),
	 * com uma HTTP Response (Resposta http).
	 * 
	 * <List<Postagem>>: O M√©todo al√©m de retornar um objeto da Classe ResponseEntity (OK ü°™ 200), 
	 * no par√¢metro body (Corpo da Resposta), ser√° retornado um Objeto da Classe List (Collection), 
	 * contendo todos os Objetos da Classe Postagem persistidos no Banco de dados, na tabela 
	 * tb_postagens. Observe que nesta linha foi utilizado um recurso chamado Java Generics, 
	 * que al√©m de simplificar o retorno do Objeto da Classe List, dispensa o uso do casting(mudan√ßa de tipos). 
	 * Observe que na defini√ß√£o do M√©todo foram utilizados os s√≠mbolos <T>, onde T √© o Tipo do Objeto 
	 * que ser√° retornado no Corpo da Resposta.
	 * 
	 * return ResponseEntity.ok(postagemRepository.findAll());: Executa o m√©todo findAll() (M√©todo padr√£o da 
	 * Interface JpaRepository), que retornar√° todos os Objetos da Classe Postagem persistidos no Banco de dados
	 * (<List<Postagem>>). Como a List sempre ser√° gerada (vazia ou n√£o), o M√©todo sempre retornar√° o Status 200 ü°™ OK.
	 * 
	 * O M√°todo findAll() √© equivalente a consulta SQL: SELECT * FROM tb_postagens;
	 * 
	 */
	@GetMapping
	public ResponseEntity<List<Postagem>> getAll (){
		return ResponseEntity.ok(postagemRepository.findAll());
	}

}